<Controls:MetroWindow x:Class="Hypermint.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:System="clr-namespace:System;assembly=mscorlib"  
        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:ExplorerControls="clr-namespace:ExplorerTreeView.Controls" 
        xmlns:Converters="clr-namespace:ExplorerTreeView.Converters"                       
        xmlns:ExtendedToolKit="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:gongDrop="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
                      
        Title="Hypermintd" Height="768" Width="1024" Loaded="MetroWindow_Loaded"
                      EnableDWMDropShadow="True" MinWidth="640" MinHeight="480"
                      >
    <Window.CommandBindings>
        <CommandBinding Command="NavigationCommands.BrowseBack" CanExecute="BrowseBack_CanExecute" Executed="BrowseBack_Executed" />
        <CommandBinding Command="NavigationCommands.BrowseForward" CanExecute="BrowseForward_CanExecute" Executed="BrowseForward_Executed" />
        <CommandBinding Command="NavigationCommands.GoToPage" CanExecute="GoToPage_CanExecute" Executed="GoToPage_Executed" />
    </Window.CommandBindings>
    <Window.Resources>
        <CollectionViewSource x:Key="ItemCollectionViewSource" CollectionViewType="ListCollectionView" />
        <CollectionViewSource x:Key="MainMenuCollectionView" CollectionViewType="ListCollectionView"/>
        <CollectionViewSource x:Key="MainMenuManagerViewSource" CollectionViewType="ListCollectionView"/>
        <CollectionViewSource x:Key="MainMenuManagerMasterViewSource" CollectionViewType="ListCollectionView"/>
        <CollectionViewSource x:Key="ICVS_Unused" CollectionViewType="ListCollectionView" />
        <CollectionViewSource x:Key="StatsCollection" CollectionViewType="ListCollectionView"/>
        <Converters:FileSystemNodeImageConverter x:Key="fileSystemNodeImageConverter"
                                                 DriveImage="Images/diskdrive.png"
                                                 DirectoryImage="Images/folder.png"/>
        <Style TargetType="TreeViewItem">
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Image Width="18" Height="18" Stretch="Fill"
                                           Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem},
                                                            Converter={StaticResource fileSystemNodeImageConverter}}"/>
                            <TextBlock Text="{Binding}" Margin="4,0,0,0"/>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Controls:MetroWindow.Flyouts>
        <Controls:FlyoutsControl>
            <Controls:Flyout AnimateOpacity="True"  Theme="Adapt" AnimateOnPositionChange="True" Position="Left" DataContext="{Binding InputViewModel}"  Header="Settings"  Width="500">
                <Grid Background="{DynamicResource AccentColorBrush}">
                    <ComboBox x:Name="comboStyles" HorizontalAlignment="Left" Margin="88,10,0,0" VerticalAlignment="Top" Width="120" SelectionChanged="comboStyles_SelectionChanged"/>
                    <CheckBox x:Name="guiThemeCheckbox" Content="Dark" HorizontalAlignment="Left" Margin="212,10,0,0" VerticalAlignment="Top" Width="64" Height="26" Checked="guiThemeCheckbox_Checked" Unchecked="guiThemeCheckbox_Unchecked"/>
                    <TextBlock HorizontalAlignment="Left" Margin="10,15,0,0" TextWrapping="Wrap" Text="Gui Style" VerticalAlignment="Top"/>
                    <TextBlock HorizontalAlignment="Left" Margin="10,118,0,0" TextWrapping="Wrap" Text="Launcher" VerticalAlignment="Top"/>
                    <TextBox Controls:TextBoxHelper.ClearTextButton="True" 
                             Controls:TextBoxHelper.Watermark="Path to launchers executable not set..."
                             x:Name="txt_launchPath" HorizontalAlignment="Left" Height="23" Margin="88,114,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="354" ToolTip="Specify launchers executable to test game."/>
                    <TextBlock HorizontalAlignment="Left" Margin="10,147,0,0" TextWrapping="Wrap" Text="Params" VerticalAlignment="Top"/>
                    <TextBox Controls:TextBoxHelper.ClearTextButton="True" 
                             Controls:TextBoxHelper.Watermark="Launcher params not set..."
                             x:Name="txt_launchParams" HorizontalAlignment="Left" Height="23" Margin="88,143,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="354" ToolTip="Specify launcher parameters."/>
                    <TextBlock HorizontalAlignment="Left" Margin="10,48,0,0" TextWrapping="Wrap" Text="HS Path" VerticalAlignment="Top"/>
                    <TextBox Controls:TextBoxHelper.ClearTextButton="True" 
                             Controls:TextBoxHelper.Watermark="HyperSpin path not set..."
                             x:Name="textboxHSPath" HorizontalAlignment="Left" Height="23" Margin="88,44,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="354" ToolTip="Path to HyperSpin."/>
                    <TextBlock HorizontalAlignment="Left" Margin="9,178,0,0" TextWrapping="Wrap" Text="Launch Media" VerticalAlignment="Top"/>
                    <TextBox Controls:TextBoxHelper.ClearTextButton="True" 
                             Controls:TextBoxHelper.Watermark="Launcher media path not set..."
                             x:Name="txt_launchMediaPath" HorizontalAlignment="Left" Height="23" Margin="88,174,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="354" ToolTip="Path to media for launcher. ie C:\Rocketlauncher\Media"/>
                    <TextBlock HorizontalAlignment="Left" Margin="9,79,0,0" TextWrapping="Wrap" Text="ImageMagick" VerticalAlignment="Top"/>
                    <TextBlock HorizontalAlignment="Left" Margin="9,236,0,0" TextWrapping="Wrap" Text="Set Author" VerticalAlignment="Top"/>
                    <TextBox Controls:TextBoxHelper.ClearTextButton="True" 
                                	Controls:TextBoxHelper.Watermark="Hypermint"
                                	x:Name="txt_author" HorizontalAlignment="Left" Height="23" Margin="88,232,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="354" ToolTip="Set author name for media creations"/>
                    <TextBox Controls:TextBoxHelper.ClearTextButton="True" 
                             Controls:TextBoxHelper.Watermark="ImageMagick not set..."
                             x:Name="txt_IMPath" HorizontalAlignment="Left" Height="23" Margin="88,75,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="354" ToolTip="Path to ImageMagick"/>
                    <Button x:Name="btn_SavePaths" Content="Save" HorizontalAlignment="Left" Margin="50,217,0,0" VerticalAlignment="Center" Width="75" Click="btn_SavePaths_Click"/>
                </Grid>
            </Controls:Flyout>
            <Controls:Flyout Header="Main Menu Manager" Position="left" Width="800" DataContext="{Binding InputViewModel}">

            </Controls:Flyout>
            <Controls:Flyout Header="Game Launch" Position="Top"  Height="600" VerticalContentAlignment="Bottom" HorizontalContentAlignment="Stretch">
                <Grid Background="{DynamicResource AccentColorBrush}">
                    <DockPanel VerticalAlignment="Top" HorizontalAlignment="Center">
                        <TextBlock Text="System: " Margin="0,0,0,0" HorizontalAlignment="Center" FontSize="32"/>
                        <TextBlock Text="" x:Name="txtSystem" Margin="10,0,0,0" HorizontalAlignment="Center" FontSize="32"/>
                    </DockPanel>
                    <DockPanel VerticalAlignment="Top" Margin="0,50" HorizontalAlignment="Center">
                        <TextBlock Text="Game: " Margin="0,0,0,0" HorizontalAlignment="Center" FontSize="32"/>
                        <TextBlock Text="" x:Name="txtGame" Margin="10,0,0,0" HorizontalAlignment="Center" FontSize="32"/>
                    </DockPanel>
                    <Image x:Name="random_Wheel" Margin="214,51,187,95"/>
                    <DockPanel Margin="308,0,245,10" Width="150" Height="44" VerticalAlignment="Bottom">
                        <Button x:Name="_buttonRandom" Width="50" ToolTip="Get random game"  Height="25" Margin="10,0,0,0" HorizontalAlignment="Left" Click="_buttonRandom_Click">
                            <Button.OpacityMask >
                                <VisualBrush Visual="{StaticResource appbar_repeat}" />
                            </Button.OpacityMask>
                        </Button>
                        <Button x:Name="_buttonPlayGame" Content="Play" Width="50" Height="25" Margin="30,0,0,0" Click="_buttonPlayGame_Click"></Button>
                        <!--<Button x:Name="_buttonGetStat" Content="Play" Width="50" Height="25" Margin="10,0,0,0" HorizontalAlignment="Left" Click="_buttonGetStat_Click"></Button>-->

                    </DockPanel>

                </Grid>
            </Controls:Flyout>
        </Controls:FlyoutsControl>
    </Controls:MetroWindow.Flyouts>
    <Grid x:Name="MainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="71*"/>
            <RowDefinition Height="39*"/>
            <RowDefinition Height="390*"/>
            <RowDefinition Height="5*"/>
            <RowDefinition Height="216*"/>
            <RowDefinition Height="16*"/>

        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="155*"/>
            <ColumnDefinition Width="861*"/>

        </Grid.ColumnDefinitions>
        <TabControl Margin="10,0,28,10" Grid.Row="4" Grid.Column="1">
            <TabItem Header="Viewer">
                <Grid Background="{DynamicResource AccentColorBrush}" AllowDrop="True" x:Name="ViewerGrid" Margin="0,-2,-5,0" Drop="ViewerGrid_Drop" DragOver="ViewerGrid_DragOver" DragEnter="ViewerGrid_DragEnter">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="439*"/>
                        <ColumnDefinition Width="383*"/>
                    </Grid.ColumnDefinitions>
                    <MediaElement x:Name="media_wheel" Margin="8,38,10,10" Stretch="Uniform" AllowDrop="True"
        				LoadedBehavior="Manual" UnloadedBehavior="Manual"
        				MediaOpened="Element_MediaOpened" MediaEnded="Element_MediaEnded" Grid.Column="1" >
                        <ContextMenuService.ContextMenu>
                            <ContextMenu x:Name="_videoContextMenu">
                                <MenuItem x:Name="_videoPreviewOpen" Header="Open" Click="_videoPreviewOpen_Click" ></MenuItem>
                                <MenuItem x:Name="previewVideoTrim" Header="Trim >" >
                                    <Controls:NumericUpDown x:Name="amountToChop" Value="30"></Controls:NumericUpDown>
                                    <RadioButton x:Name="vidReplace" Content="Replace" ToolTip="Move original to rubbish, replace with trimmed video."/>
                                    <RadioButton x:Name="vidCopy" Content="New Copy" ToolTip="Creates a trim at this folder"/>
                                    <Button Content="Trim" Click="previewVideoTrim_Click"></Button>
                                </MenuItem>
                            </ContextMenu>
                        </ContextMenuService.ContextMenu>
                    </MediaElement>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Width="289" Height="38" VerticalAlignment="Top" Grid.Column="1" Margin="8,0,0,0">
                        <Button Margin="0,2,0,0" x:Name="txtToPDF" HorizontalAlignment="Left" Width="30" Height="30" VerticalAlignment="Top" ToolTip="Convert this text to PDF" IsEnabled="False" Click="txtToPDF_Click">
                            <Button.OpacityMask >
                                <VisualBrush Visual="{StaticResource appbar_paper}" />
                            </Button.OpacityMask>
                        </Button>
                        <Button Margin="5,2,0,0" x:Name="PDFtoIMG" HorizontalAlignment="Left" Width="30" Height="30" VerticalAlignment="Top" ToolTip="Convert this pdf to images" IsEnabled="False" Click="PDFtoIMG_Click">
                            <Button.OpacityMask >
                                <VisualBrush Visual="{StaticResource appbar_adobe_acrobat}" />
                            </Button.OpacityMask>
                        </Button>
                        <Button Margin="5,5,0,0" x:Name="openImageEdit" HorizontalAlignment="Left" Width="27" Height="30" VerticalAlignment="Top" ToolTip="Open with external text editor" Click="openFilters_Click" IsEnabled="False">
                            <Button.OpacityMask >
                                <VisualBrush Visual="{StaticResource appbar_draw_brush}" />
                            </Button.OpacityMask>
                        </Button>
                        <Button x:Name="cancelPDFWorker" Margin="5,2,0,0" Background="Red" HorizontalAlignment="Left" Width="31" Height="30" VerticalAlignment="Top" ToolTip="Cancel scanning" PreviewMouseLeftButtonUp="rectScanCancel_PreviewMouseUp" IsEnabled="False" Click="cancelPDFWorker_Click">
                            <Button.OpacityMask >
                                <VisualBrush Visual="{StaticResource appbar_cancel}" />
                            </Button.OpacityMask>
                        </Button>
                    </StackPanel>

                    <Rectangle Margin="99,10,-4,22" Fill="White" x:Name="textBigIcon" ToolTip="Text file" Visibility="Collapsed" Grid.Column="1">
                        <Rectangle.OpacityMask >
                            <VisualBrush Visual="{StaticResource appbar_paper}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Rectangle Margin="99,10,-4,22" Fill="White" x:Name="pdfBigIcon" ToolTip="Text file" Visibility="Collapsed" Grid.Column="1">
                        <Rectangle.OpacityMask >
                            <VisualBrush Visual="{StaticResource appbar_adobe_acrobat}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <Image x:Name="image_wheel" Source="{Binding WheelSource, UpdateSourceTrigger=PropertyChanged}" Margin="8,38,2,10" AllowDrop="True" Grid.Column="1">
                        <ContextMenuService.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Open with >">
                                    <MenuItem Header="External Edit"></MenuItem>
                                    <MenuItem Header="Default.."></MenuItem>
                                </MenuItem>
                                <MenuItem Header="BezelEdit"  ToolTip="Send this image to the bezel editor." Click="MenuItem_Click">
                                </MenuItem>
                                <MenuItem Header="Image Edit" ToolTip="Sends to image editing" Click="MenuItem_Click_1"></MenuItem>
                                <MenuItem Header="Copy" x:Name="_copyMenuItems" ContextMenuOpening="_copyMenuItems_ContextMenuOpening">
                                    <ComboBox></ComboBox>
                                </MenuItem>
                                <MenuItem Header="Preset job" IsEnabled="True">
                                    <MenuItem Header="Instruction Card" ToolTip="Send this file to Instruction cards">
                                        <ComboBox x:Name="presetsInMenu" Width="100">
                                        </ComboBox>
                                        <Button x:Name="createCardInMenu" Content="Create" ToolTip="Convert and send to cards." Click="createCardInMenu_Click"></Button>
                                    </MenuItem>
                                    <MenuItem Header="Image Presets" >
                                        <ComboBox x:Name="_comboPresetFade" 
                                                  ToolTip="Select preset"
                                                  Width="100" ItemsSource="{Binding ElementName=presetListBoxCards3,Path=Items}"></ComboBox>
                                        <MenuItem Header="Media Type" IsEnabled="True">
                                            <MenuItem Header="Layer 1" Click="_imageCreateInMenu"></MenuItem>
                                            <MenuItem Header="Layer 2" Click="_imageCreateInMenu"></MenuItem>
                                            <MenuItem Header="Layer 3" Click="_imageCreateInMenu"></MenuItem>
                                            <MenuItem Header="Layer -1" Click="_imageCreateInMenu"></MenuItem>
                                            <MenuItem Header="Background" Click="_imageCreateInMenu"></MenuItem>
                                            <MenuItem Header="Background HS" Click="_imageCreateInMenu"></MenuItem>
                                            <MenuItem Header="Bezel Background" Click="_imageCreateInMenu"></MenuItem>
                                        </MenuItem>
                                    </MenuItem>
                                </MenuItem>
                            </ContextMenu>
                        </ContextMenuService.ContextMenu>
                    </Image>
                    <ExplorerControls:ExplorerTreeView x:Name="explorer"
                    		ExplorerError="explorer_ExplorerError" SelectedItemChanged="explorer_SelectedItemChanged" Width="157" Margin="9,29,0,5" HorizontalAlignment="Left"/>
                    <DataGrid x:Name="filesBox"  HorizontalAlignment="Stretch" AutoGenerateColumns="False" PreviewMouseUp="filesBox_PreviewMouseUp" Margin="171,29,4,5">
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding Name}" Header="Name"/>
                            <DataGridTextColumn Binding="{Binding Extension}" Header="Extension"/>
                        </DataGrid.Columns>
                    </DataGrid>
                    <Button x:Name="openFolder" HorizontalAlignment="Left" Width="26" Height="25" VerticalAlignment="Top" ToolTip="Open folder in explorer"
                    	Margin="10,4,0,0" Click="openFolder_Click">
                        <Button.OpacityMask >
                            <VisualBrush Visual="{StaticResource appbar_folder_open}" />
                        </Button.OpacityMask>
                    </Button>
                    <Controls:ProgressRing x:Name="progressBarViewer"  IsActive="False" Height="131" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="149" Margin="61,0,0,22" Grid.Column="1" />
                    <Button x:Name="sendToTrashHSViewer" HorizontalAlignment="Left" Width="26" Height="25" VerticalAlignment="Top" ToolTip="Send this selected file/s to rubbish." PreviewMouseUp="sendToTrashHSViewer_PreviewMouseUp_1"
                    	Margin="171,4,0,0">
                        <Button.OpacityMask >
                            <VisualBrush Visual="{StaticResource appbar_clear}" />
                        </Button.OpacityMask>
                    </Button>
                    <GridSplitter HorizontalAlignment="Left" Grid.Column="1" Width="3"/>
                </Grid>
            </TabItem>
            <TabItem Header="Files" IsEnabled="False">
                <Grid Background="#FFE5E5E5">
                    <TextBlock x:Name="textblockSelectedInfo" HorizontalAlignment="Left" Margin="10,10,0,0" TextWrapping="Wrap" Text="Current slected system &amp; game" VerticalAlignment="Top" Height="16" Width="166"/>
                    <DataGrid x:Name="tempDatatest" DataContext="{StaticResource ICVS_Unused}" ItemsSource="{Binding}" AutoGenerateColumns="False" HorizontalAlignment="Left" Margin="166,58,0,9" Width="386" KeyDown="tempDatatest_KeyDown">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="File" />
                        </DataGrid.Columns>
                    </DataGrid>
                    <Button x:Name="moveTrash" Content="Move Trash" HorizontalAlignment="Left" Margin="586,118,0,0" VerticalAlignment="Top" Width="88" Click="moveTrash_Click"/>
                </Grid>
            </TabItem>
        </TabControl>
        <Grid Background="{DynamicResource AccentColorBrush}" Margin="5">
            <Image x:Name="systemImage" Stretch="Uniform" Margin="10,5"/>
            <Button Content="Button" HorizontalAlignment="Left" Margin="622,16,0,0" VerticalAlignment="Top" Width="74"/>
        </Grid>
        <TabControl x:Name="rlMedaiTab" Margin="115,10,10,0" Grid.Column="1" Grid.RowSpan="3">

            <TabItem Header="Manager" x:Name="_ManagerTab">

                <Grid Background="{DynamicResource AccentColorBrush}" Margin="-5,20,-2,10" Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="422*"/>
                        <ColumnDefinition Width="429*"/>
                    </Grid.ColumnDefinitions>
                    <DataGrid x:Name="hsDatagrid" ColumnWidth="{Binding ColumnWidth}" CanUserAddRows="False" DataContext="{StaticResource ItemCollectionViewSource}" ItemsSource="{Binding}" AutoGenerateColumns="False" Margin="10"  SelectedCellsChanged="hsDatagrid_SelectedCellsChanged" CurrentCellChanged="hsDatagrid_CurrentCellChanged" MouseUp="hsDatagrid_MouseUp" IsReadOnly="True" Grid.ColumnSpan="2" >
                        <DataGrid.ContextMenu>
                            <ContextMenu x:Name="datagridHSContext">
                                <MenuItem Header="Add > ">
                                    <MenuItem x:Name="contextAddMultiSys" Header="MultiSys List" ToolTip="Add selected games to multisystem list" Click="contextAddMultiSys_Click"></MenuItem>
                                    <MenuItem x:Name="contextAddMultiSysFav" Header="MultiSys Faves" ToolTip="Add favorites on the system to multisystem list" Click="contextAddMultiSysFav_Click"></MenuItem>
                                </MenuItem>
                                <MenuItem Header="Launch Game" x:Name="LaunchGame" Click="LaunchGame_Click"/>
                                <MenuItem Header="RL Mode">
                                    <MenuItem Header="Pause" Click="RLModeClick"/>
                                    <MenuItem Header="MultiGame" Click="RLModeClick"/>
                                    <MenuItem Header="Fade" Click="RLModeClick"/>
                                    <MenuItem Header="Fade7z" Click="RLModeClick"/>
                                </MenuItem>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                        <DataGrid.Columns>
                            <DataGridCheckBoxColumn x:Name="Fav" Header="Fav" Binding="{Binding IsFavorite, UpdateSourceTrigger=PropertyChanged}" Visibility="Collapsed"/>
                            <DataGridTextColumn x:Name="Romname" Header="Name" Binding="{Binding RomName, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="Description" Binding="{Binding Description, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="Manufacturer" Binding="{Binding Manufacturer}"/>
                            <DataGridTextColumn Header="Year" Binding="{Binding Year}" Visibility="Collapsed"/>
                            <DataGridTextColumn Header="Genre" Binding="{Binding Genre}" Visibility="Collapsed"/>
                            <DataGridTextColumn Header="CloneOf" Binding="{Binding CloneOf}" Visibility="Collapsed"/>
                            <DataGridTextColumn Header="Rating" Binding="{Binding Rating}" Visibility="Collapsed"/>
                            <DataGridCheckBoxColumn x:Name="gameEnabled" Header="Enabled" Binding="{Binding Enabled}" Visibility="Collapsed"/>
                            <DataGridTextColumn Header="Crc" Binding="{Binding Crc}" Visibility="Collapsed"/>

                            <DataGridTextColumn Header="Wheel" Binding="{Binding HaveWheel, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle >
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveWheel}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveWheel}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Theme" Binding="{Binding HaveTheme, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveTheme}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveTheme}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Artwork1" Binding="{Binding HaveArt1, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArt1}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArt1}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Artwork2" Binding="{Binding HaveArt2, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArt2}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArt2}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Artwork3" Binding="{Binding HaveArt3, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArt3}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArt3}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Artwork4" Binding="{Binding HaveArt4, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArt4}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArt4}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Background" Binding="{Binding HaveBackgroundsHS, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveBackgroundsHS}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveBackgroundsHS}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Video" Binding="{Binding HaveVideo, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveVideo}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveVideo}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="BG-Music" Binding="{Binding HaveBGMusic, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveBGMusic}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveBGMusic}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>

                            <!--19-->
                            <DataGridTextColumn Header="Letters" Binding="{Binding HaveLetters, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveLetters}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                                <Setter Property="TextBlock.Text" Value="ghg"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveLetters}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Special" Binding="{Binding HaveSpecial, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveSpecial}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveSpecial}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="GenreWheel" Binding="{Binding HaveGenreWheel, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveGenreWheel}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveGenreWheel}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="GenreBG" Binding="{Binding HaveGenreBG, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveGenreBG}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveGenreBG}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Pointer" Binding="{Binding HavePointer, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HavePointer}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HavePointer}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Snds-Wheel" Binding="{Binding HaveS_Wheel, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveS_Wheel}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveS_Wheel}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Snds-SysStart" Binding="{Binding HaveS_Start, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveS_Start}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveS_Start}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Snds-SysExit" Binding="{Binding HaveS_Exit, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveS_Exit}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveS_Exit}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Snds-Click" Binding="{Binding HaveS_Click, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveS_Click}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveS_Click}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>

                            <!--28-->
                            <DataGridTextColumn Header="Artwork" Binding="{Binding HaveArtwork, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArtwork}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArtwork}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveBackgrounds}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveBackgrounds}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Bezels" Binding="{Binding HaveBezels, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveBezels}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveBezels}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Cards" Binding="{Binding HaveCards, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveCards}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveCards}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Controller" Binding="{Binding HaveController, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveController}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveController}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Fade" Binding="{Binding HaveFade, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveFade}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveFade}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Guides" Binding="{Binding HaveGuide, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveGuide}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveGuide}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Manuals" Binding="{Binding HaveManual, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveManual}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveManual}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="MultiGame" Binding="{Binding HaveMultiGame, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveMultiGame}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveMultiGame}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Music" Binding="{Binding HaveMusic, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveMusic}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveMusic}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Saves" Binding="{Binding HaveSaves, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveSaves}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveSaves}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Videos" Binding="{Binding HaveVideoXT, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveVideoXT}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveVideoXT}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>


                        </DataGrid.Columns>
                    </DataGrid>

                </Grid>

            </TabItem>

            <TabItem Header="Create" x:Name="_tabCreate">
                <TabControl>
                    <TabItem Header="MultiSys" ToolTip="Create Multiple system databases">

                        <Grid Background="{DynamicResource AccentColorBrush}">
                            <DataGrid x:Name="multiSystemDataGrid" CanUserAddRows="False" AutoGenerateColumns="False" ItemsSource="{Binding m_System}" Margin="10,42,10,60">
                                <DataGrid.Columns>

                                    <DataGridTemplateColumn Header="X">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button  Content="X" Click="Button_Click_13"></Button>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>

                                    </DataGridTemplateColumn>


                                    <DataGridTextColumn Header="Rom" Binding="{Binding RomName}"></DataGridTextColumn>
                                    <DataGridTextColumn Header="Genre" Binding="{Binding Genre}"></DataGridTextColumn>
                                    <DataGridTextColumn Header="Year" Binding="{Binding Year}"></DataGridTextColumn>
                                    <DataGridTextColumn Header="System" Binding="{Binding System}"></DataGridTextColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                            <Button x:Name="buildMultiXml" Content="Build-XML" HorizontalAlignment="Left" Margin="617,0,0,5" Width="76" Click="buildMultiXml_Click" Height="25" VerticalAlignment="Bottom"/>
                            <TextBox Controls:TextBoxHelper.ClearTextButton="True" 
                                         ToolTip="Specify name for multi system"
                                	Controls:TextBoxHelper.Watermark="Empty"
                                	x:Name="_textMultiSysName" Margin="126,6,0,0" TextWrapping="Wrap" HorizontalAlignment="Left" Width="206" Height="26" VerticalAlignment="Top"/>
                            <Button x:Name="buildFaves" Content="+ Faves" ToolTip="Scan all favorites.txt and build one list." HorizontalAlignment="Left" Margin="351,6,0,0" VerticalAlignment="Top" Width="76" Click="buildFaves_Click"/>
                            <Button x:Name="clear_m_system" Content="Clear" ToolTip="Clear this preperation list" HorizontalAlignment="Left" Margin="432,6,0,0" VerticalAlignment="Top" Width="76" Click="clear_m_system_Click"/>

                            <TextBlock HorizontalAlignment="Left" Margin="10,10,0,0" TextWrapping="Wrap" Text="Multi-System Name" Height="16" VerticalAlignment="Top"/>
                            <TextBlock HorizontalAlignment="Left" Margin="10,0,0,39" TextWrapping="Wrap" Text="Default HS Settings" VerticalAlignment="Bottom"/>
                            <TextBox 
                                	Controls:TextBoxHelper.Watermark="Choose settings file"
                                	x:Name="_textSettingsFile" ToolTip="Pick an existing settings file for template for this system" Height="26" Margin="10,0,0,5" TextWrapping="Wrap" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="278"/>
                            <Button Content="..." ToolTip="Pick an existing settings file for template for this system" HorizontalAlignment="Left" Margin="293,0,0,6" VerticalAlignment="Bottom" Width="30" Click="Button_Click_12"/>
                            <CheckBox x:Name="_defaultTheme" Content="Use default theme" Margin="468,0,0,6" ToolTip="Make links to the current systems default.zip theme/nif game theme doesn't exist" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="129" IsChecked="True"/>
                            <CheckBox x:Name="_RomMap" Content="Rom Map" Margin="468,0,0,29" ToolTip="Creates a Games.ini for Rocketlauncher rom mapping" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="129" IsChecked="True"/>
                            <CheckBox x:Name="_symLinks" Content="Create links" ToolTip="Don't create symbolic links for media." Margin="334,0,0,6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="129"/>
                            <CheckBox x:Name="_genGenres" Content="Genre lists" Margin="334,0,0,29" ToolTip="Create genre lists for this system." VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="129" IsChecked="True"/>
                        </Grid>
                    </TabItem>
                    <TabItem Header="BezelEdit" x:Name="_tabBezel" PreviewMouseDown="TabItem_PreviewMouseDown">
                        <Grid>
                            <Image x:Name="screenImage" Margin="6,10,10,88" Stretch="UniformToFill"/>
                            <Image x:Name="bezelImage" Stretch="Fill" Margin="10,10,6,88" MouseDown="bezelImage_MouseDown" />

                            <TextBlock HorizontalAlignment="Left" Margin="12,0,0,67" TextWrapping="Wrap" Text="Bezel Screen Top Left Click X" Height="16" VerticalAlignment="Bottom"/>
                            <TextBlock HorizontalAlignment="Left" Margin="12,0,0,39" TextWrapping="Wrap" Text="Bezel Screen Top Left Click Y" VerticalAlignment="Bottom"/>
                            <TextBox x:Name="LeftClickX" HorizontalAlignment="Left" Margin="178,0,0,60" TextWrapping="Wrap" Text="" Width="41" Height="23" VerticalAlignment="Bottom"/>
                            <TextBox x:Name="LeftClickY" HorizontalAlignment="Left" Margin="178,0,0,32" TextWrapping="Wrap" Text="" Width="41" Height="23" VerticalAlignment="Bottom"/>
                            <TextBlock HorizontalAlignment="Left" Margin="224,0,0,67" TextWrapping="Wrap" Text="Bezel Screen Bottom Right Click X" Height="16" VerticalAlignment="Bottom"/>
                            <TextBlock Margin="224,0,0,39" TextWrapping="Wrap" Text="Bezel Screen Bottom Right Click Y" Height="16" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="179"/>
                            <TextBox x:Name="RightClickX" HorizontalAlignment="Left" Margin="412,0,0,60" TextWrapping="Wrap" Text="" Width="41" Height="23" VerticalAlignment="Bottom"/>
                            <TextBox x:Name="RightClickY" HorizontalAlignment="Left" Margin="412,0,0,32" TextWrapping="Wrap" Text="" Width="40" Height="23" VerticalAlignment="Bottom"/>
                            <Button x:Name="SaveBezel" Content="Save ini" HorizontalAlignment="Left" Margin="473,0,0,5" Width="75" Height="20" VerticalAlignment="Bottom" Click="SaveBezel_Click" />
                            <TextBlock HorizontalAlignment="Left" Margin="298,0,0,10" TextWrapping="Wrap" Text="Author :" VerticalAlignment="Bottom"/>
                            <TextBox x:Name="authorText" HorizontalAlignment="Left" Margin="345,0,0,4" TextWrapping="Wrap" Text="HyperMint" Width="108" Height="23" VerticalAlignment="Bottom"/>
                            <TextBlock HorizontalAlignment="Left" Margin="10,0,0,7" TextWrapping="Wrap" Text="Ratio :" VerticalAlignment="Bottom" Width="37"/>
                            <TextBlock HorizontalAlignment="Left" Margin="128,0,0,7" TextWrapping="Wrap" Text="Description" VerticalAlignment="Bottom"/>
                            <TextBox Controls:TextBoxHelper.Watermark="Description" x:Name="descText" HorizontalAlignment="Left" Margin="196,0,0,4" TextWrapping="Wrap" Width="97" Height="23" VerticalAlignment="Bottom"/>
                            <ComboBox x:Name="RatioComboBox" HorizontalAlignment="Left" Margin="52,0,0,4" Width="64" Height="22" VerticalAlignment="Bottom" SelectedIndex="0">
                                <ComboBoxItem x:Name="Item01" Content="16x9"/>
                                <ComboBoxItem x:Name="Item02" Content="16x10"/>
                                <ComboBoxItem x:Name="Item03" Content="4x3"/>
                            </ComboBox>
                        </Grid>
                    </TabItem>

                    <TabItem Header="Cards" IsEnabled="True" ToolTip="Create instruction cards. Enabled with bezels.">
                        <Grid Margin="0,0,4,2" Background="{DynamicResource AccentColorBrush}">
                            <TextBox x:Name="cardsTextBox" HorizontalAlignment="Left" Height="24" Margin="10,11,0,0" TextWrapping="Wrap" Text="Help" VerticalAlignment="Top" Width="178" />
                            <ComboBox x:Name="ComboBox1" HorizontalAlignment="Left" Margin="10,50,0,0" VerticalAlignment="Top" Width="178" Height="25" RenderTransformOrigin="0.5,0.5" >
                            </ComboBox>
                            <DockPanel Margin="205,49,0,313" HorizontalAlignment="Left">
                                <Label Content="Author" HorizontalAlignment="Left" Margin="0,2,0,0" VerticalAlignment="Top" Height="24" Width="134"/>
                                <TextBox x:Name="authorTextBox" HorizontalAlignment="Right" Height="24" TextWrapping="Wrap" VerticalAlignment="Top" Width="210" Text="Hypermint"/>

                            </DockPanel>
                            <DockPanel Margin="205,14,265,348">
                                <TextBox x:Name="OutputfileWidthCards" HorizontalAlignment="Left" Height="23" TextWrapping="Wrap" Text="350" VerticalAlignment="Top" Width="40"/>
                                <TextBox x:Name="OutputfileHeightCards" HorizontalAlignment="Left" Height="23" TextWrapping="Wrap" Text="500" VerticalAlignment="Top" Width="38"/>
                                <CheckBox x:Name="StretchCheckBoxCards" Content="Stretch" HorizontalAlignment="Left" Margin="5,6,0,0" VerticalAlignment="Top"/>
                                <CheckBox x:Name="ResizeCheckboxCards" Content="Resize" HorizontalAlignment="Left" Margin="5,6,0,0" VerticalAlignment="Top" Height="19"/>
                            </DockPanel>
                            <ListBox x:Name="presetListBoxCards" Margin="10,149,0,5" HorizontalAlignment="Left" Width="352" SelectedIndex="1" SelectionChanged="presetListBoxCards_SelectionChanged" />
                            <Button x:Name="delPresetCards" Content="Del" VerticalAlignment="Top" HorizontalAlignment="Left" Width="64" Height="25" Margin="298,118,0,0" ToolTip="Delete Selected Preset" Click="delPresetCards_Click"/>
                            <TextBox x:Name="presetTextBoxCards" HorizontalAlignment="Left" Height="26" TextWrapping="Wrap" Text="Preset" VerticalAlignment="Top" Width="188" Margin="10,118,0,0"/>
                            <Button x:Name="savePresetCards" Content="Save" VerticalAlignment="Top" HorizontalAlignment="Left" Width="80" Height="25" Margin="205,118,0,0" ToolTip="Save Preset" Click="savePresetCards_Click"/>
                        </Grid>
                    </TabItem>
                    <TabItem Header="Images" x:Name="_tabImageEdit">
                        <Grid Background="{DynamicResource AccentColorBrush}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <GroupBox Header="Options" Margin="0" Height="206" VerticalAlignment="Bottom">

                                <Grid Margin="1,-2,-2,-3">
                                    <StackPanel>
                                        <GroupBox  Header="RL Media Type" ToolTip="Set the media type" x:Name="FadeGroupBox" HorizontalAlignment="Left" VerticalAlignment="Top" Height="58" Width="527" Margin="-5,-2,0,0">
                                            <DockPanel Height="auto" VerticalAlignment="Top">
                                                <RadioButton x:Name="Fade1" Content="Layer 1" IsChecked="True" GroupName="_radioMediaType" ToolTip="global, system or game fade background "/>
                                                <RadioButton x:Name="Fade2" Content="Layer 2" GroupName="_radioMediaType" Margin="10,0,0,0" ToolTip="static image above background. Preferred: console or arcade machine image."/>
                                                <RadioButton x:Name="Fade3" Content="Layer 3" GroupName="_radioMediaType" HorizontalAlignment="Left" Margin="10,0,0,0" ToolTip="now loading image"/>
                                                <RadioButton x:Name="Fade4" Content="Layer -1" GroupName="_radioMediaType" HorizontalAlignment="Left" Margin="10,0,0,0"  ToolTip="fade exit image. "/>
                                                <RadioButton x:Name="PauseBack" Content="Background" GroupName="_radioMediaType" HorizontalAlignment="Left" Margin="10,0,0,0" ToolTip="Pause background. "/>
                                                <RadioButton x:Name="BezelBack" Content="Bezel Background" GroupName="_radioMediaType" HorizontalAlignment="Left" Margin="10,0,0,0"  ToolTip="Bezel background. "/>
                                            </DockPanel>
                                        </GroupBox>
                                    </StackPanel>

                                    <Label Content="Description" Margin="247,0,0,9" Height="24" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="70"/>
                                    <TextBox x:Name="prefixTextbox" Height="24" Margin="322,0,0,7" TextWrapping="Wrap" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="202"/>
                                    <TextBox x:Name="_text_ImageAuthor" Height="24" Margin="322,0,0,38" TextWrapping="Wrap" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="203"/>
                                    <ComboBox x:Name="RatioComboBox1" HorizontalAlignment="Left" Margin="384,0,0,82" VerticalAlignment="Bottom" Width="68" >
                                        <ComboBoxItem x:Name="Itm1" Content="16x9" IsSelected="True"/>
                                        <ComboBoxItem x:Name="Itm2" Content="16x10"/>
                                        <ComboBoxItem x:Name="Itm3" Content="4x3"/>
                                    </ComboBox>
                                    <DockPanel Margin="0,98,454,48">
                                        <Controls:NumericUpDown x:Name="TileW" HorizontalAlignment="Left" Height="23" VerticalAlignment="Top" Width="85" Minimum="1" Value="200"/>
                                        <Controls:NumericUpDown x:Name="TileH" HorizontalAlignment="Left" Height="23" Margin="10,0,0,0" VerticalAlignment="Top" Width="84" Minimum="1" Value="150"/>
                                        <CheckBox x:Name="TileCheckBox" Content="Tile" HorizontalAlignment="Left" Margin="10,0,0,0" />
                                    </DockPanel>
                                    <DockPanel Margin="0,64,356,82" Width="auto">
                                        <Controls:NumericUpDown x:Name="_numOutWidth"  HorizontalAlignment="left" Height="23" Value="1920" VerticalAlignment="Top" Width="101"/>
                                        <Controls:NumericUpDown x:Name="_numOutHeight" HorizontalAlignment="Left" Height="23" Value="1080" Margin="5,0,0,0" VerticalAlignment="Top" Width="91"/>
                                        <CheckBox x:Name="ResizeCheckbox" Content="Resize"  Margin="10,0,0,0" Width="auto" IsChecked="True"/>
                                        <CheckBox x:Name="StretchCheckBox" Content="Stretch"  Margin="10,0,0,0" IsChecked="True" />
                                    </DockPanel>
                                    <CheckBox x:Name="FlipRCheck" Content="R" HorizontalAlignment="Left" Margin="188,0,0,6" VerticalAlignment="Bottom" />
                                    <Label Content="Flip" HorizontalAlignment="Left" Margin="149,0,0,18" VerticalAlignment="Bottom" Height="24" Width="40"/>
                                    <CheckBox x:Name="FlipLCheck" Content="L" HorizontalAlignment="Left" Margin="189,0,0,29" VerticalAlignment="Bottom"  RenderTransformOrigin="3.051,0.622"/>
                                    <Label Content="Ratio" HorizontalAlignment="Left" Margin="343,0,0,84" RenderTransformOrigin="3.514,1.125" Height="24" VerticalAlignment="Bottom"/>
                                    <CheckBox x:Name="JPGCheckbox" Content="JPG" HorizontalAlignment="Left" Margin="469,68,0,0" VerticalAlignment="Top" />
                                    <Label Content="Author" Margin="264,0,0,38" Height="24" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="70"/>

                                </Grid>
                            </GroupBox>
                            <GroupBox Header="Preview" Margin="0,0,0,206">
                                <Image x:Name="picbox" Margin="0,0,0,0" Stretch="Fill"/>
                            </GroupBox>
                            <Button Content="Preview" Margin="10,0,0,10" Click="Button_Click" Height="22" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="54"/>
                            <Button x:Name="saveImageEdit" Content="Save" Margin="69,0,0,10" Height="22" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="54" Click="saveImageEdit_Click"/>
                            <Label x:Name="TextImageSize" Content="Orig Image Size: " HorizontalAlignment="Left" Margin="76,1,0,0" RenderTransformOrigin="0.531,0.521" Height="28" VerticalAlignment="Top"/>
                            <Grid Margin="525,0,10,0" Height="175" VerticalAlignment="Bottom">
                                <ListBox x:Name="presetListBoxCards3" Margin="10,41,-3,10" SelectedIndex="1" SelectionChanged="presetListBoxCards3_SelectionChanged" />
                                <Button x:Name="delPresetCards3" Content="Del" VerticalAlignment="Top" HorizontalAlignment="Left" Width="31" Height="25" Margin="48,11,0,0" ToolTip="Delete Selected Preset" Click="delPresetCards_Click"/>
                                <TextBox x:Name="presetTextBoxCard3s" Height="26" TextWrapping="Wrap" Text="Preset" VerticalAlignment="Top" Margin="84,10,0,0"/>
                                <Button x:Name="savePresetCards3" Content="Save" VerticalAlignment="Top" HorizontalAlignment="Left" Width="33" Height="25" Margin="10,11,0,0" ToolTip="Save Preset" Click="saveXMLPresetImages"/>
                            </Grid>
                        </Grid>
                    </TabItem>
                    <TabItem Header="Intros" ToolTip="Generate aviSynth video conversion scripts for main menu intros." IsEnabled="True" Margin="-6,0,6,0">
                        <Grid Background="{DynamicResource {x:Static SystemColors.DesktopBrushKey}}">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="129*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="299*"/>
                                <ColumnDefinition Width="101*"/>
                                <ColumnDefinition Width="303*"/>
                            </Grid.ColumnDefinitions>
                            <DockPanel Margin="0,0,256,43" Grid.Row="1" Grid.ColumnSpan="3" Height="31" VerticalAlignment="Bottom">
                                <Label Content="Start Frame" ToolTip="Frame to start every video" HorizontalAlignment="Left" Margin="0,0,0,0" Width="71" Height="26" VerticalAlignment="Bottom"/>
                                <Label Content="End Frame" ToolTip="Frame to end on every video " HorizontalAlignment="Left" Margin="15,0,0,0" Width="90" Height="26" VerticalAlignment="Bottom"/>
                                <Label Content="Dissolve Time"  ToolTip="Amount of time to dissolve videos" HorizontalAlignment="Left" Margin="-10,0,0,0" Width="83" Height="26" VerticalAlignment="Bottom"/>
                                <Label Content="Fade Out Time" ToolTip="Fade out time" HorizontalAlignment="Left" Width="88" Height="26" VerticalAlignment="Bottom"/>
                                <Label Content="Fade in Time" ToolTip="Fade in time" HorizontalAlignment="Left" Margin="0,0,0,0" Width="77" Height="26" VerticalAlignment="Bottom"/>
                            </DockPanel>
                            <DockPanel Margin="10,0,286,10" Grid.Row="1" Grid.ColumnSpan="3" Height="28" VerticalAlignment="Bottom">
                                <TextBox x:Name="startFrame" HorizontalAlignment="Left" Margin="0,0,0,2" TextWrapping="Wrap" Text="60" Width="27" Height="17" VerticalAlignment="Bottom"/>
                                <TextBox x:Name="framesText" HorizontalAlignment="Left" Margin="55,0,0,2" TextWrapping="Wrap" Text="300" Width="34" Height="23" VerticalAlignment="Bottom"/>
                                <TextBox x:Name="dissolveTime" HorizontalAlignment="Left" Margin="55,0,0,2" TextWrapping="Wrap" Text="25" Width="34" Height="28" VerticalAlignment="Bottom"/>
                                <TextBox x:Name="fadeIn" HorizontalAlignment="Left" Margin="55,0,0,2" TextWrapping="Wrap" Text="45" Width="32" Height="17" VerticalAlignment="Bottom"/>
                                <TextBox x:Name="fadeOut" HorizontalAlignment="Left" Margin="55,0,0,2" TextWrapping="Wrap" Text="45" Width="33" Height="25" VerticalAlignment="Bottom"/>
                            </DockPanel>
                            <ListBox x:Name="listbox1" ItemsSource="{Binding introVideos}" Margin="10,9,2,108" Grid.Row="1" PreviewMouseUp="listbox1_PreviewMouseUp">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <DockPanel>
                                            <TextBlock Text="{Binding FileName}" />
                                            <TextBlock Text="{Binding Format}" Margin="10,0,0,0"/>
                                            <TextBlock Text="{Binding FrameRate}" Margin="10,0,0,0"/>
                                        </DockPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                            <DockPanel Margin="76,0,0,74" Grid.Row="1" Height="29" VerticalAlignment="Bottom">
                                <TextBox x:Name="videoAmount" ToolTip="Random video amount" HorizontalAlignment="Left" Margin="0,0,0,3" TextWrapping="Wrap" Text="12" Width="34" Height="20" VerticalAlignment="Bottom"/>
                                <Label Content="Random Videos" ToolTip="Grab random videos from the list" HorizontalAlignment="Left" Width="98" Height="26" VerticalAlignment="Bottom"/>
                                <Button Content="Grab Vids" ToolTip="Grab random videos from the list" Margin="0,0,0,3" Height="20" VerticalAlignment="Bottom"  HorizontalAlignment="Left" Width="74" Click="Button_Click_10"/>
                            </DockPanel>
                            <ListBox x:Name="listbox2" ItemsSource="{Binding introVideos}" Margin="89,7,9,108" Grid.Row="1" PreviewMouseUp="listbox1_PreviewMouseUp" Grid.Column="1" Grid.ColumnSpan="2">

                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <DockPanel>
                                            <TextBlock Text="{Binding FileName}" />
                                            <TextBlock Text="{Binding Format}" Margin="10,0,0,0"/>
                                            <TextBlock Text="{Binding FrameRate}" Margin="10,0,0,0"/>
                                        </DockPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>

                            </ListBox>
                            <Button x:Name="scanVideos" Content="Scan" Margin="10,0,0,78" ToolTip="Scan selected system for videos" Height="25" Grid.Row="1"  HorizontalAlignment="Left" Width="54" Click="scanVideos_Click" VerticalAlignment="Bottom"/>
                            <CheckBox x:Name="incWheels" Content="Include Wheels" ToolTip="Adds current game wheel overlaid on each video" Margin="16,0,0,47" Grid.Row="1" Grid.Column="2" Height="18" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="104"/>
                            <Controls:NumericUpDown x:Name="wheelOverVidX" HorizontalAlignment="Left" Width="76" Minimum="0" Maximum="2000" Value="5" Margin="135,0,0,43" Grid.Row="1" Grid.Column="2" Height="26" VerticalAlignment="Bottom"/>
                            <Controls:NumericUpDown x:Name="wheelOverVidY" HorizontalAlignment="Left" Width="76" Minimum="0" Maximum="2000" Value="420" Margin="216,0,0,43" Grid.Row="1" Grid.Column="2" Height="26" VerticalAlignment="Bottom"/>

                            <Controls:NumericUpDown x:Name="resizeW" HorizontalAlignment="Left" Width="76" Minimum="0" Maximum="2000" Value="200" Margin="135,0,0,10" Grid.Row="1" Grid.Column="2" Height="26" VerticalAlignment="Bottom"/>
                            <Controls:NumericUpDown x:Name="resizeH" HorizontalAlignment="Left" Width="76" Minimum="0" Maximum="2000" Value="50" Margin="216,0,0,10" Grid.Row="1" Grid.Column="2" Height="26" VerticalAlignment="Bottom"/>
                            <CheckBox x:Name="resizeWheels" Content="Resize Wheels" IsChecked="True" ToolTip="Adds current game wheel overlaid on each video" HorizontalAlignment="Left" Margin="16,0,0,14" Grid.Row="1" Grid.Column="2" Width="99" Height="18" VerticalAlignment="Bottom"/>
                            <DockPanel Grid.Column="1" Margin="16,0,0,137" Grid.Row="1" HorizontalAlignment="Left" Width="49" Height="68" VerticalAlignment="Bottom">
                                <Button Content="&lt;&lt;" Height="25" VerticalAlignment="Top" Click="Button_Click_7" HorizontalAlignment="Left" Width="22" Margin="0,27,0,-27"/>
                                <Button Content="&gt;&gt;" HorizontalAlignment="Left" Width="22" Height="25" VerticalAlignment="Top" Click="Button_Click_5" Margin="0,27,0,-27"/>

                            </DockPanel>
                            <Button Content="Clear" ToolTip="Clear this list ^" Margin="16,0,0,112" Click="Button_Click_4" RenderTransformOrigin="-0.145,-1.16" HorizontalAlignment="Left" Width="49" Grid.Column="1" Grid.Row="1" Height="25" VerticalAlignment="Bottom"/>
                            <Button Content="Scan Format" ToolTip="Scans videos in second list for its frame size &amp; framerate" Click="Button_Click_11" RenderTransformOrigin="-0.145,-1.16" HorizontalAlignment="Left" Width="81" Grid.Column="1" Margin="3,0,0,224" Grid.Row="1" Height="25" VerticalAlignment="Bottom"/>
                            <DockPanel Grid.Column="2" Margin="9,0,0,78" Grid.Row="1" HorizontalAlignment="Left" Width="153" Height="25" VerticalAlignment="Bottom">
                                <Button Content="Script" ToolTip="Create avisynth script"  Height="25" VerticalAlignment="Top" HorizontalAlignment="Center" Width="68" Click="Button_Click_8"/>
                                <Button Content="Exports"  ToolTip="Open export scripts folder" HorizontalAlignment="Center" Width="71" Click="Button_Click_9" Height="25" VerticalAlignment="Bottom"/>

                            </DockPanel>

                        </Grid>
                    </TabItem>

                    <TabItem Header="Wheels" ToolTip="Generate wheel/s with Imagemagick">
                        <Grid x:Name="simpleWheelGrid" Margin="0,0,-9,-6" Height="406" VerticalAlignment="Top">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="6*"/>
                                <ColumnDefinition Width="722*"/>
                                <ColumnDefinition Width="11*"/>
                            </Grid.ColumnDefinitions>
                            <Grid Margin="4,5,9,-40" Grid.Column="1" Grid.ColumnSpan="2" Height="441" VerticalAlignment="Top">
                                <GroupBox Header="Font &amp; Wheel Type" Margin="0,76,0,0" Height="78" VerticalAlignment="Top">
                                    <Grid Height="55" VerticalAlignment="Top" Margin="0,0,-2,-1">
                                        <StackPanel Margin="228,7,157,22" Orientation="Horizontal">
                                            <RadioButton x:Name="selectWheels" Content="Wheels" HorizontalAlignment="Left" Width="69" ToolTip="Wheels for hyperspin" IsChecked="True" Height="26" VerticalAlignment="Top" Checked="selectWheels_Checked"/>
                                            <RadioButton x:Name="selectLetters" Content="Letters" HorizontalAlignment="Left" ToolTip="Letters for hyperspin" VerticalAlignment="Top" Width="77" Margin="0,4,0,0" Checked="selectLetters_Checked" />
                                            <RadioButton x:Name="selectGenre" Content="Genre" HorizontalAlignment="Left" ToolTip="Genres for hyperspin" VerticalAlignment="Top" Width="77" Margin="0,4,0,0" Checked="selectGenre_Checked" />
                                            <RadioButton x:Name="selectSpecialArt" Content="Special Art 3" ToolTip="Special Art for hyperspin" HorizontalAlignment="Left" VerticalAlignment="Top" Width="95" Margin="0,4,0,0" Checked="selectSpecialArt_Checked" />
                                        </StackPanel>
                                        <TextBox x:Name="fontTextBox" HorizontalAlignment="Left" Height="20" TextWrapping="Wrap" Text="Arial" VerticalAlignment="Top" Width="161" Margin="62,7,0,0"/>
                                        <Button x:Name="fontSelect" Content="Select" HorizontalAlignment="Left" VerticalAlignment="Top" Width="50" ToolTip="Run &quot;convert -list font &gt;fonts.txt&quot; in the Imagemagick directory if your font doesnt work to get the correct name" Margin="7,7,0,0" Click="fontSelect_Click"/>
                                        <StackPanel Margin="568,10,103,20" Orientation="Horizontal">
                                            <RadioButton x:Name="CaptionCheckBox" Content="Caption" ToolTip="Type of wheel text style, caption or label." HorizontalAlignment="Left" Width="69" IsChecked="True" Height="22" VerticalAlignment="Top" RenderTransformOrigin="1.304,4.8"/>
                                            <RadioButton x:Name="labelRadioButton" Content="Label" HorizontalAlignment="Left" VerticalAlignment="Top" Width="57" Height="22"/>
                                        </StackPanel>
                                    </Grid>
                                </GroupBox>
                                <GroupBox Header="Options" Height="72" VerticalAlignment="Top" Margin="0,156,0,0">
                                    <Grid Margin="0,0,10,-4">


                                        <CheckBox Content="Border" HorizontalAlignment="Left" Margin="438,7,0,36"/>
                                        <StackPanel Margin="10,4,0,7" Orientation="Horizontal">
                                            <Label Content="Fill" HorizontalAlignment="Left" Height="26" VerticalAlignment="Top"/>
                                            <Button x:Name="fillColorButton" Content="" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Background="#FFF9F937" Height="26" Click="fillColorButton_Click" />
                                            <Label Content="Stroke" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top"/>
                                            <Button x:Name="strokeColorButton" Content="" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Background="Black" Height="26" Click="strokeColorButton_Click" />
                                            <Controls:NumericUpDown x:Name="numericUpDownStroke" HorizontalAlignment="Left" Width="72" Minimum="0" Maximum="100" Value="100"/>
                                            <Label Content="BG" HorizontalAlignment="Left" Margin="9,3,0,0" VerticalAlignment="Top"/>
                                            <Button x:Name="bgColorButton" Content="" Margin="6,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="23" Background="White" Height="26" Click="bgColorButton_Click" />

                                            <CheckBox x:Name="transCheckBox" Content="Transparent" HorizontalAlignment="Left" Margin="10,3,0,0" VerticalAlignment="Top" IsChecked="True"/>
                                            <CheckBox x:Name="shadeCheckBox" Content="Shade" HorizontalAlignment="Left" Margin="10,3,0,0" VerticalAlignment="Top" Width="69"/>
                                            <Controls:NumericUpDown x:Name="numericUpDownShadeX" HorizontalAlignment="Left" Width="72" Minimum="0" Maximum="100" Value="100"/>
                                            <Controls:NumericUpDown x:Name="numericUpDownShadeY" HorizontalAlignment="Left" Width="72" Minimum="0" Maximum="100" Value="100"/>
                                            <CheckBox x:Name="GravitycheckBox" Content="Gravity" HorizontalAlignment="Left" Margin="0,3,0,0" VerticalAlignment="Top" IsChecked="True"/>
                                            <ComboBox x:Name="gravityDropDown" VerticalAlignment="Top" Height="20" HorizontalAlignment="Left" Width="77" >
                                                <ComboBoxItem x:Name="Item1" Content="NorthWest"/>
                                                <ComboBoxItem x:Name="Item2" Content="North"/>
                                                <ComboBoxItem x:Name="Item3" Content="NorthEast"/>
                                                <ComboBoxItem x:Name="Item4" Content="West"/>
                                                <ComboBoxItem x:Name="Item5" Content="Center"/>
                                                <ComboBoxItem x:Name="Item6" Content="East"/>
                                                <ComboBoxItem x:Name="Item7" Content="SouthWest"/>
                                                <ComboBoxItem x:Name="Item8" Content="South"/>
                                                <ComboBoxItem x:Name="Item9" Content="SouthEast"/>
                                            </ComboBox>
                                        </StackPanel>
                                    </Grid>
                                </GroupBox>
                                <StackPanel Margin="0,10,10,287" Orientation="Horizontal">
                                    <TextBox x:Name="gamenameTextBox" HorizontalAlignment="Left" TextWrapping="Wrap" Text="Mario Bros." Width="318" Height="26" VerticalAlignment="Top"/>
                                    <TextBox x:Name="specialPrefixTextBox" HorizontalAlignment="Left" TextWrapping="Wrap" Text="Current Genre" Width="303" Height="26" VerticalAlignment="Top"/>
                                </StackPanel>
                                <GroupBox Header="Size" Margin="0,231,0,0" Height="81" VerticalAlignment="Top" HorizontalAlignment="Left" Width="372">
                                    <StackPanel Margin="10,0,0,0" Orientation="Horizontal">
                                        <Controls:NumericUpDown x:Name="numericUpDownWidth" HorizontalAlignment="Left" Width="82" Minimum="0" Maximum="4096" Value="400" ToolTip="Width of output wheel. May not be exact size you specify on some parameters"/>
                                        <Controls:NumericUpDown x:Name="numericUpDownHeight" Minimum="0" Maximum="2160" Value="175" VerticalAlignment="Center" HorizontalAlignment="Left" Width="76" ToolTip="Wheel height"/>
                                        <CheckBox x:Name="trimCheckBox" ToolTip="Trim the final image" Content="Trim" HorizontalAlignment="Left" IsChecked="True" Height="32" VerticalAlignment="Center" Width="59" Margin="10,0,0,0"/>
                                        <Controls:NumericUpDown x:Name="numericUpDownArc" ToolTip="Arch the text." HorizontalAlignment="Left" Width="71" Minimum="0" Maximum="200" Value="10" VerticalAlignment="Center" Margin="0,0,0,-2"/>
                                        <Label Content="Arc"  Margin="10,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="auto"/>
                                    </StackPanel>
                                </GroupBox>
                                <GroupBox Header="Shadow" Margin="0,317,0,0" Height="81" VerticalAlignment="Top" RenderTransformOrigin="0.636,0.553" HorizontalAlignment="Left" Width="372">

                                    <StackPanel Margin="10,10,-47,6" Orientation="Horizontal" Height="26">
                                        <CheckBox x:Name="ShadowcheckBox" Content="On" HorizontalAlignment="Left" Margin="0,5,0,0" ToolTip="Enabled shadow" VerticalAlignment="Center" IsChecked="True"/>

                                        <Button x:Name="shadowColorButton" ToolTip="Shadow color" Content="" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="10,1,0,0" Background="Black" Height="12" Click="shadowColorButton_Click" />
                                        <Controls:NumericUpDown x:Name="numericUpDownShadow" ToolTip="Shadow amount" HorizontalAlignment="Left" Width="72" Minimum="0" Maximum="100" Value="100" Margin="5,0,0,0"/>
                                        <Controls:NumericUpDown x:Name="numericUpDownShadowDistance" ToolTip="Shadow distance" HorizontalAlignment="Left" Width="72" Minimum="0" Maximum="199" Value="1"/>

                                        <CheckBox x:Name="SwapcheckBox" Content="Swap" ToolTip="Swap the shadow" HorizontalAlignment="Left" Margin="10,5,0,0" VerticalAlignment="Top" IsChecked="True" Width="57"/>
                                        <CheckBox x:Name="RepagecheckBox" Content="Repage" ToolTip="Repage shadow" HorizontalAlignment="Left" Margin="0,4" VerticalAlignment="Center" IsChecked="True"/>
                                    </StackPanel>


                                </GroupBox>
                            </Grid>
                            <Grid Grid.Column="1" Margin="379,240,0,-191">
                                <GroupBox Header="Presets" Margin="0,-5,0,0">
                                    <StackPanel>
                                        <DockPanel Margin="0,0,0,93">
                                            <TextBox x:Name="presetTextBox" Margin="5,0,0,0" HorizontalAlignment="Left" Height="26" TextWrapping="Wrap" Text="Preset" VerticalAlignment="Center" Width="214"/>
                                            <Button x:Name="savePreset" Content="Save" VerticalAlignment="Center" HorizontalAlignment="Left" Width="40" Height="25" Margin="10,0,0,0" ToolTip="Save Preset" Click="savePreset_Click"/>
                                            <Button x:Name="delPreset" Content="Del" VerticalAlignment="Center" HorizontalAlignment="Left" Width="32" Height="25" Margin="10,0,0,0" ToolTip="Delete Selected Preset"/>
                                        </DockPanel>

                                    </StackPanel>

                                </GroupBox>
                                <ListBox x:Name="presetListBox" Margin="10,58,10,23" SelectionChanged="presetListBox_SelectionChanged" />
                            </Grid>
                            <Label Content="Distance" HorizontalAlignment="Left" Margin="184,343,0,0" VerticalAlignment="Top" Grid.Column="1"/>
                            <DockPanel Grid.Column="1" Margin="4,50,0,326">
                                <Button x:Name="buttonPreviewWheel" Content="Preview" HorizontalAlignment="Left" VerticalAlignment="Top" Width="62" Click="buttonPreviewWheel_Click" Height="26" ToolTip="Preview the parameters"/>
                                <Button x:Name="runWheelButton" Content="Run" HorizontalAlignment="Left" VerticalAlignment="Top" Width="50" Background="#FF57B814" Margin="0,1,0,0" ToolTip="Run the wheels in batch." Height="25" Click="runWheelButton_Click"/>
                                <Button x:Name="stopButton" Content="Stop" HorizontalAlignment="Left" VerticalAlignment="Top" Width="51" ToolTip="Stop wheel processing" Background="#FFEC5050" Height="25" Click="stopButton_Click" Margin="0,1,0,0"/>
                                <Button x:Name="exportButton" Content="Export Folder" HorizontalAlignment="Left" VerticalAlignment="top" Width="93" ToolTip="Open current systems export folder" Height="25" Click="exportButton_Click" DockPanel.Dock="Left"/>
                                <CheckBox x:Name="OnlyMissCheckBox" Content="Missing Wheels" HorizontalAlignment="left"  VerticalAlignment="Center" IsChecked="True" Height="18" Width="136" Checked="OnlyMissCheckBox_Checked" Margin="0,0,0,8" ToolTip="Only run batch on missing wheels in database" DockPanel.Dock="Left"/>
                                <CheckBox x:Name="previewCreatedCheckBox" Content="Preview Created" IsChecked="True" Height="18" VerticalAlignment="Center" ToolTip="Preview the output of each image in batch run" Checked="previewCreatedCheckBox_Checked" Unchecked="previewCreatedCheckBox_Unchecked" Width="132" HorizontalAlignment="Left" Margin="0,0,0,8" DockPanel.Dock="Left"/>
                            </DockPanel>
                        </Grid>
                    </TabItem>


                </TabControl>
            </TabItem>

            <TabItem Header="Search" x:Name="assetSearch">
                <Grid Margin="0,0,0,-17" Background="{DynamicResource AccentColorBrush}">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="252*"/>
                        <ColumnDefinition Width="5*"/>
                        <ColumnDefinition Width="571*"/>
                    </Grid.ColumnDefinitions>
                    <WebBrowser x:Name="browser" Navigating="browser_Navigating" Margin="5,34,10,54" Grid.Column="2" IsEnabled="False"/>

                    <DataGrid x:Name="SearchDatagrid" ColumnWidth="{Binding ColumnWidth}" CanUserAddRows="False" DataContext="{StaticResource ItemCollectionViewSource}" ItemsSource="{Binding}" AutoGenerateColumns="False" Margin="10,10,10,44" SelectedCellsChanged="hsDatagrid_SelectedCellsChanged" CurrentCellChanged="hsDatagrid_CurrentCellChanged" MouseUp="hsDatagrid_MouseUp" IsReadOnly="True" >
                        <DataGrid.ContextMenu>
                            <ContextMenu x:Name="datagridHSContext1">
                                <MenuItem Header="{Binding SelectedRomname, UpdateSourceTrigger=PropertyChanged}"/>
                                <MenuItem Header="Launch Game" x:Name="LaunchGame1" Click="LaunchGame_Click"/>
                                <MenuItem Header="RL Mode">
                                    <MenuItem Header="Pause" Click="RLModeClick"/>
                                    <MenuItem Header="MultiGame" Click="RLModeClick"/>
                                    <MenuItem Header="Fade" Click="RLModeClick"/>
                                    <MenuItem Header="Fade7z" Click="RLModeClick"/>
                                </MenuItem>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                        <DataGrid.Columns>
                            <DataGridCheckBoxColumn x:Name="Fav2" Header="Fav" Binding="{Binding IsFavorite, UpdateSourceTrigger=PropertyChanged}" Visibility="Collapsed"/>
                            <DataGridTextColumn x:Name="Romname2" Header="Name" Binding="{Binding RomName, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="Description" Binding="{Binding Description, UpdateSourceTrigger=PropertyChanged}"/>
                            <DataGridTextColumn Header="Manufacturer" Binding="{Binding Manufacturer}"/>
                            <DataGridTextColumn Header="Year" Binding="{Binding Year}" Visibility="Collapsed"/>
                            <DataGridTextColumn Header="Genre" Binding="{Binding Genre}" Visibility="Collapsed"/>
                            <DataGridTextColumn Header="CloneOf" Binding="{Binding CloneOf}" Visibility="Collapsed"/>
                            <DataGridTextColumn Header="Rating" Binding="{Binding Rating}" Visibility="Collapsed"/>
                            <DataGridCheckBoxColumn x:Name="gameEnabled2" Header="Enabled" Binding="{Binding Enabled}" Visibility="Collapsed"/>
                            <DataGridTextColumn Header="Crc" Binding="{Binding Crc}" Visibility="Collapsed"/>

                            <DataGridTextColumn Header="Wheel" Binding="{Binding HaveWheel, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle >
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveWheel}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveWheel}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Theme" Binding="{Binding HaveTheme, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveTheme}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveTheme}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Artwork1" Binding="{Binding HaveArt1, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArt1}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArt1}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Artwork2" Binding="{Binding HaveArt2, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArt2}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArt2}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Artwork3" Binding="{Binding HaveArt3, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArt3}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArt3}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Artwork4" Binding="{Binding HaveArt4, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArt4}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArt4}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Background" Binding="{Binding HaveBackgroundsHS, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveBackgroundsHS}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveBackgroundsHS}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Video" Binding="{Binding HaveVideo, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveVideo}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveVideo}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Music" Binding="{Binding HaveBGMusic, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveBGMusic}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveBGMusic}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>

                            <!--19-->
                            <DataGridTextColumn Header="Letters" Binding="{Binding HaveLetters, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveLetters}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                                <Setter Property="TextBlock.Text" Value="ghg"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveLetters}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Special" Binding="{Binding HaveSpecial, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveSpecial}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveSpecial}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="GenreWheel" Binding="{Binding HaveGenreWheel, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveGenreWheel}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveGenreWheel}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="GenreBG" Binding="{Binding HaveGenreBG, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveGenreBG}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveGenreBG}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Pointer" Binding="{Binding HavePointer, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HavePointer}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HavePointer}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Snds-Wheel" Binding="{Binding HaveS_Wheel, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveS_Wheel}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveS_Wheel}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Snds-SysStart" Binding="{Binding HaveS_Start, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveS_Start}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveS_Start}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Snds-SysExit" Binding="{Binding HaveS_Exit, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveS_Exit}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveS_Exit}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Snds-Click" Binding="{Binding HaveS_Click, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Collapsed">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveS_Click}" Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveS_Click}" Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>

                            <!--28-->
                            <DataGridTextColumn Header="Artwork" Binding="{Binding HaveArtwork, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveArtwork}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveArtwork}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveBackgrounds}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveBackgrounds}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Bezels" Binding="{Binding HaveBezels, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveBezels}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveBezels}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Cards" Binding="{Binding HaveCards, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveCards}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveCards}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Controller" Binding="{Binding HaveController, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveController}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveController}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Fade" Binding="{Binding HaveFade, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveFade}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveFade}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Guides" Binding="{Binding HaveGuide, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveGuide}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveGuide}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Manuals" Binding="{Binding HaveManual, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveManual}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveManual}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="MultiGame" Binding="{Binding HaveMultiGame, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveMultiGame}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveMultiGame}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Music" Binding="{Binding HaveMusic, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveMusic}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveMusic}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Saves" Binding="{Binding HaveSaves, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveSaves}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveSaves}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                            <DataGridTextColumn Header="Videos" Binding="{Binding HaveVideoXT, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HaveVideoXT}" 
                    							Value="True">
                                                <Setter Property="Background" Value="#263DDE36"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding HaveVideoXT}" 
                    							Value="False">
                                                <Setter Property="Background" Value="#26FF5454"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Margin="1,0,0,0" ResizeDirection="Columns" Cursor="ScrollWE"/>
                    <TextBox x:Name="txtUrl" Text="Download Video" Margin="5,3,50,0" Grid.Column="2" Height="26" VerticalAlignment="Top"/>
                    <Button x:Name="rectBrowseBack_Copy1" Command="NavigationCommands.GoToPage" Background="Green" ToolTip="Scan RL media folders" Margin="0,3,10,0"  Grid.Column="2" Height="26" VerticalAlignment="Top" HorizontalAlignment="Right" Width="27">
                        <Button.OpacityMask >
                            <VisualBrush Visual="{StaticResource appbar_globe}" />
                        </Button.OpacityMask>
                    </Button>

                    <Button Command="NavigationCommands.BrowseBack" x:Name="rectBrowseBack" Background="Green" HorizontalAlignment="Left" Width="34" ToolTip="Scan RL media folders" Margin="10,0,0,22" Height="25" Grid.Column="2" VerticalAlignment="Bottom" >
                        <Button.OpacityMask >
                            <VisualBrush Visual="{StaticResource appbar_arrow_left}" />
                        </Button.OpacityMask>
                    </Button>
                    <Button x:Name="rectBrowseBack_Copy" Command="NavigationCommands.BrowseForward" Background="Green" HorizontalAlignment="Left" Width="34" ToolTip="Scan RL media folders" Height="29" Grid.Column="2" Margin="49,0,0,20" VerticalAlignment="Bottom">
                        <Button.OpacityMask >
                            <VisualBrush Visual="{StaticResource appbar_arrow_right}" />
                        </Button.OpacityMask>
                    </Button>
                    <Button x:Name="searchGameYoutube" Background="WhiteSmoke" ToolTip="Search game on Youtube" Margin="0,0,147,24" Click="_buttonSearchYoutube" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="38" Grid.Column="2">
                        <Button.OpacityMask >
                            <VisualBrush Visual="{StaticResource appbar_youtube}" />
                        </Button.OpacityMask>
                    </Button>

                    <Button  x:Name="btn_ytb_downloader_Copy"  Background="Green" ToolTip="Download this video" Margin="0,0,104,23" Click="btn_ytb_downloader_Copy_Click" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="38" Grid.Column="2">
                        <Button.OpacityMask>
                            <VisualBrush Visual="{StaticResource appbar_refresh_clockwise_down}"/>
                        </Button.OpacityMask>
                    </Button>
                    <ComboBox x:Name="_comboResolution" Margin="0,0,10,23" HorizontalAlignment="Right" Width="89" Height="26" VerticalAlignment="Bottom"
                    		ToolTip="Video preffered resolution" Grid.Column="2"/>



                </Grid>

            </TabItem>

            <TabItem Header="Stats" IsEnabled="False">
                <Grid Background="{DynamicResource AccentColorBrush}">
                    <DockPanel Margin="10,2,0,-2">
                        <TextBlock Text="Total Time: " FontSize="20" VerticalAlignment="Top" Width="auto" Height="auto" Margin="0,0,0,423"/>
                        <TextBlock HorizontalAlignment="Left" FontSize="20" Margin="0,8,0,0" Width="auto" TextWrapping="Wrap" 
                                   Text="{Binding TotalOverAllTime}"  VerticalAlignment="Top"/>
                    </DockPanel>
                    <DataGrid x:Name="statsDataGrid" AutoGenerateColumns="False" CanUserAddRows="False" Margin="10,44,10,77"
                		DataContext="{StaticResource StatsCollection}" ItemsSource="{Binding}">

                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Number" />
                            <DataGridTextColumn Header="Game" Binding="{Binding Rom}"/>
                            <DataGridTextColumn Header="System" Binding="{Binding _systemName}"/>
                            <DataGridTextColumn Header="Times Pld" Binding="{Binding TimesPlayed}"/>
                            <DataGridTextColumn Header="Avg Time" Binding="{Binding AvgTimePlayed}"/>
                            <DataGridTextColumn Header="Total Time" Binding="{Binding TotalTimePlayed}"/>
                            <DataGridTextColumn Header="Last Pld" Binding="{Binding LastTimePlayed, StringFormat=\{0:yy.MM.dd HH:mm:ss\}}"/>

                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellStyle>
                                    <Style/>
                                </DataGridTemplateColumn.CellStyle>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <Button x:Name="scanStats" Content="Scan" HorizontalAlignment="Left" Margin="10,0,0,44" VerticalAlignment="Bottom" Width="56" Click="scanStats_Click"/>
                    <DockPanel Margin="94,0,26,38" Height="34" VerticalAlignment="Bottom">
                        <Controls:ToggleSwitch Content="Systems" Width="139"/>
                        <Controls:ToggleSwitch Content="Top 100" Width="139"/>
                        <Controls:ToggleSwitch Content="Top 50" Width="139"/>
                        <Controls:ToggleSwitch Content="Top 10" Width="139"/>
                    </DockPanel>
                    <Controls:NumericUpDown Margin="169,412,0,7" Minimum="10" Maximum="1000" HorizontalAlignment="Left" Width="99"/>

                    <Button Content="Build" HorizontalAlignment="Left" Margin="110,0,0,7" VerticalAlignment="Bottom" Width="54"/>
                </Grid>
            </TabItem>
            <TabItem Header="Tools">
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <TabControl Margin="11,0,10,10">

                        <TabItem Header="Menu Manage">
                            <Grid>


                                <ListBox gongDrop:DragDrop.IsDragSource="True" gongDrop:DragDrop.IsDropTarget="True"  x:Name="xmlListCurrent" VirtualizingStackPanel.IsVirtualizing="False" UseLayoutRounding="True" ScrollViewer.VerticalScrollBarVisibility="Disabled" Margin="10,8,371,50" SelectionMode="Single" ItemsSource="{Binding Source={StaticResource MainMenuManagerViewSource}}"
                                             >
                                    <ListBox.ItemTemplate >
                                        <DataTemplate>
                                            <DockPanel >
                                                <CheckBox IsChecked="{Binding enabled}"/>
                                                <TextBlock  Margin="25,4,0,0"  HorizontalAlignment="Left" VerticalAlignment="Center">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding XmlExists}" 
                                            							Value="True">
                                                                    <Setter Property="Background" Value="#263DDE36"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding XmlExists}" 
                                            							Value="False">
                                                                    <Setter Property="Background" Value="#26FF5454"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                                <Image Source="{Binding SysIcon}" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" />
                                                <TextBlock Text="{Binding name}" Margin="0,4,0,0"  HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="13" />

                                            </DockPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                                <ListBox  x:Name="xmlMasterMenuManage" VirtualizingStackPanel.IsVirtualizing="False" Margin="360,8,10,50" SelectionMode="Single"
                                             >
                                    <ListBox.ItemTemplate >
                                        <DataTemplate>
                                            <DockPanel >
                                                <TextBlock  Margin="25,4,0,0"  HorizontalAlignment="Left" VerticalAlignment="Center">
                                                    <TextBlock.Style>
                                                        <Style TargetType="{x:Type TextBlock}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding XmlExists}" 
                                            							Value="True">
                                                                    <Setter Property="Background" Value="#263DDE36"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding XmlExists}" 
                                            							Value="False">
                                                                    <Setter Property="Background" Value="#26FF5454"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                                <Image Source="{Binding SysIcon}" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" />
                                                <TextBlock Text="{Binding name}" Margin="0,4,0,0"  HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="13" />

                                            </DockPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>

                                <Button x:Name="saveXmlMenu" Content="Save" Margin="205,0,0,7" Click="saveXmlMenu_Click" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="55"/>
                                <TextBox Controls:TextBoxHelper.Watermark="Main Menu" x:Name="textboxSaveXmlName" HorizontalAlignment="Left" Width="180" VerticalAlignment="Bottom" Margin="10,0,0,6"/>
                                <Button x:Name="switchXML" Content="Switch" Margin="265,0,0,7" HorizontalAlignment="Left" Width="50" Height="25" VerticalAlignment="Bottom"/>
                                <ComboBox HorizontalAlignment="Left" x:Name="_comboMenuManage" Margin="320,0,0,7" Width="111" Height="26" VerticalAlignment="Bottom" SelectionChanged="_comboMenuManage_SelectionChanged"/>
                                <TextBlock Text="{Binding SystemsEnabled}" Margin="21,0,0,37" Height="27" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="169"></TextBlock>
                            </Grid>

                        </TabItem>
                        <TabItem Header="SysChk">
                            <DataGrid x:Name="xmlListCurrents" CanUserAddRows="False" AutoGenerateColumns="False" VirtualizingStackPanel.IsVirtualizing="False" Margin="10,7,1,10" SelectionMode="Extended" ItemsSource="{Binding Source={StaticResource MainMenuManagerMasterViewSource}}" MouseDoubleClick="xmlListCurrents_MouseDoubleClick"
                                             >
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn>
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding SysIcon}" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTextColumn Header="System" IsReadOnly="True" Binding="{Binding name}"></DataGridTextColumn>
                                    <DataGridCheckBoxColumn Header="Enabled" IsReadOnly="True" Binding="{Binding enabled, UpdateSourceTrigger=PropertyChanged}"></DataGridCheckBoxColumn>
                                    <DataGridTextColumn Header="XML" IsReadOnly="True" Binding="{Binding XmlExists, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                        <DataGridTextColumn.CellStyle>
                                            <Style TargetType="{x:Type DataGridCell}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding XmlExists}" 
                    							Value="True">
                                                        <Setter Property="Background" Value="#263DDE36"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding XmlExists}" 
                    							Value="False">
                                                        <Setter Property="Background" Value="#26FF5454"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </DataGridTextColumn.CellStyle>
                                    </DataGridTextColumn>
                                    <DataGridTextColumn Header="GenreXML" IsReadOnly="True" Binding="{Binding GenreExists, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                                        <DataGridTextColumn.CellStyle>
                                            <Style TargetType="{x:Type DataGridCell}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding GenreExists}" 
                    							Value="True">
                                                        <Setter Property="Background" Value="#263DDE36"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding GenreExists}" 
                    							Value="False">
                                                        <Setter Property="Background" Value="#26FF5454"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </DataGridTextColumn.CellStyle>
                                    </DataGridTextColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </TabItem>
                    </TabControl>
                </Grid>
            </TabItem>

            <Grid Background="{DynamicResource AccentColorBrush}" Height="434" Width="863">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="422*"/>
                    <ColumnDefinition Width="429*"/>
                </Grid.ColumnDefinitions>

                <DataGrid x:Name="hsDatagrid3" CanUserAddRows="False" ItemsSource="{Binding}" AutoGenerateColumns="False" Margin="10" SelectedCellsChanged="hsDatagrid_SelectedCellsChanged" CurrentCellChanged="hsDatagrid_CurrentCellChanged" MouseUp="hsDatagrid_MouseUp" IsReadOnly="True" Grid.ColumnSpan="2" >
                    <DataGrid.Resources>
                        <Style TargetType="{x:Type ScrollViewer}"/>
                    </DataGrid.Resources>
                    <DataGrid.DataContext>
                        <StaticResource ResourceKey="ItemCollectionViewSource"/>
                    </DataGrid.DataContext>
                    <DataGrid.Columns>
                        <DataGridTextColumn x:Name="Romname4" Header="Name" Binding="{Binding RomName, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn Header="Description" Binding="{Binding Description, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn Header="Manufacturer" Binding="{Binding Manufacturer}"/>
                        <DataGridTextColumn Header="Artwork" Binding="{Binding HaveArtwork, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveArtwork}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveArtwork}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Bezels" Binding="{Binding HaveBezels, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBezels}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBezels}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Cards" Binding="{Binding HaveCards, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Controller" Binding="{Binding HaveController, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveController}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveController}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Cards" Binding="{Binding HaveCards, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Fade" Binding="{Binding HaveFade, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveFade}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveFade}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Guide" Binding="{Binding HaveGuide, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveGuide}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveGuide}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Manual" Binding="{Binding HaveManual, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveManual}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveManual}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="MultiGame" Binding="{Binding HaveMultiGame, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveMultiGame}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveMultiGame}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Music" Binding="{Binding HaveMusic, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveMusic}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveMusic}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Saves" Binding="{Binding HaveSaves, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveSaves}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveSaves}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Videos" Binding="{Binding HaveVideoXT, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveVideoXT}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveVideoXT}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>

                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
            <Grid Background="{DynamicResource AccentColorBrush}" Height="434" Width="863" Margin="-6,10,4,16">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="422*"/>
                    <ColumnDefinition Width="429*"/>
                </Grid.ColumnDefinitions>
                <DataGrid x:Name="hsDatagrid1" ColumnWidth="{Binding ColumnWidth}" CanUserAddRows="False" DataContext="{StaticResource ItemCollectionViewSource}" ItemsSource="{Binding}" AutoGenerateColumns="False" Margin="10" SelectedCellsChanged="hsDatagrid_SelectedCellsChanged" CurrentCellChanged="hsDatagrid_CurrentCellChanged" MouseUp="hsDatagrid_MouseUp" IsReadOnly="True" >
                    <DataGrid.ContextMenu>
                        <ContextMenu x:Name="datagridHSContext2">
                            <MenuItem Header="{Binding SelectedRomname, UpdateSourceTrigger=PropertyChanged}"/>
                            <MenuItem Header="Launch Game" x:Name="LaunchGame2" Click="LaunchGame_Click"/>
                            <MenuItem Header="RL Mode">
                                <MenuItem Header="Pause" Click="RLModeClick"/>
                                <MenuItem Header="MultiGame" Click="RLModeClick"/>
                                <MenuItem Header="Fade" Click="RLModeClick"/>
                                <MenuItem Header="Fade7z" Click="RLModeClick"/>
                            </MenuItem>
                        </ContextMenu>
                    </DataGrid.ContextMenu>
                    <DataGrid.Columns>
                        <DataGridTextColumn x:Name="Romname3" Header="Name" Binding="{Binding RomName, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn Header="Description" Binding="{Binding Description, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn Header="Manufacturer" Binding="{Binding Manufacturer}"/>
                        <DataGridTextColumn Header="Wheel" Binding="{Binding HaveWheel, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveWheel}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveWheel}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Theme" Binding="{Binding HaveTheme, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveTheme}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveTheme}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Artwork1" Binding="{Binding HaveArt1, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveArt1}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveArt1}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Artwork2" Binding="{Binding HaveArt2, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveArt2}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveArt2}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Artwork3" Binding="{Binding HaveArt3, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveArt3}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveArt3}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Artwork4" Binding="{Binding HaveArt4, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveArt4}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveArt4}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Video" Binding="{Binding HaveVideo, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible"
                                                >
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveVideo}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveVideo}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Letters" Binding="{Binding HaveLetters, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveLetters}" Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                            <Setter Property="TextBlock.Text" Value="ghg"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveLetters}" Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Special" Binding="{Binding HaveSpecial, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveSpecial}" Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveSpecial}" Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="GenreWheel" Binding="{Binding HaveGenreWheel, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveGenreWheel}" Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveGenreWheel}" Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="GenreBG" Binding="{Binding HaveGenreBG, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveGenreBG}" Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveGenreBG}" Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Pointer" Binding="{Binding HavePointer, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HavePointer}" Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HavePointer}" Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                    </DataGrid.Columns>
                </DataGrid>

                <DataGrid x:Name="hsDatagridRL1" CanUserAddRows="False" ItemsSource="{Binding}" AutoGenerateColumns="False" Margin="10" SelectedCellsChanged="hsDatagrid_SelectedCellsChanged" CurrentCellChanged="hsDatagrid_CurrentCellChanged" MouseUp="hsDatagrid_MouseUp" IsReadOnly="True" Grid.Column="1" >
                    <DataGrid.Resources>
                        <Style TargetType="{x:Type ScrollViewer}"/>
                    </DataGrid.Resources>
                    <DataGrid.DataContext>
                        <StaticResource ResourceKey="ItemCollectionViewSource"/>
                    </DataGrid.DataContext>
                    <DataGrid.Columns>
                        <DataGridTextColumn x:Name="Romname5" Header="Name" Binding="{Binding RomName, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn Header="Description" Binding="{Binding Description, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn Header="Manufacturer" Binding="{Binding Manufacturer}"/>
                        <DataGridTextColumn Header="Artwork" Binding="{Binding HaveArtwork, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveArtwork}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveArtwork}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Bezels" Binding="{Binding HaveBezels, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBezels}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBezels}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Cards" Binding="{Binding HaveCards, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Controller" Binding="{Binding HaveController, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveController}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveController}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Cards" Binding="{Binding HaveCards, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Fade" Binding="{Binding HaveFade, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveFade}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveFade}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Guide" Binding="{Binding HaveGuide, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveGuide}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveGuide}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Manual" Binding="{Binding HaveManual, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveManual}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveManual}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="MultiGame" Binding="{Binding HaveMultiGame, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveMultiGame}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveMultiGame}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Music" Binding="{Binding HaveMusic, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveMusic}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveMusic}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Saves" Binding="{Binding HaveSaves, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveSaves}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveSaves}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Videos" Binding="{Binding HaveVideoXT, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveVideoXT}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveVideoXT}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>

                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
            <Grid Background="{DynamicResource AccentColorBrush}" Height="434" Width="863">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="422*"/>
                    <ColumnDefinition Width="429*"/>
                </Grid.ColumnDefinitions>

                <DataGrid x:Name="hsDatagridRL2" CanUserAddRows="False" ItemsSource="{Binding}" AutoGenerateColumns="False" Margin="10"  SelectedCellsChanged="hsDatagrid_SelectedCellsChanged" CurrentCellChanged="hsDatagrid_CurrentCellChanged" MouseUp="hsDatagrid_MouseUp" IsReadOnly="True" Grid.ColumnSpan="2" >
                    <DataGrid.Resources>
                        <Style TargetType="{x:Type ScrollViewer}"/>
                    </DataGrid.Resources>
                    <DataGrid.DataContext>
                        <StaticResource ResourceKey="ItemCollectionViewSource"/>
                    </DataGrid.DataContext>
                    <DataGrid.Columns>
                        <DataGridTextColumn x:Name="Romname7" Header="Name" Binding="{Binding RomName, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn Header="Description" Binding="{Binding Description, UpdateSourceTrigger=PropertyChanged}"/>
                        <DataGridTextColumn Header="Manufacturer" Binding="{Binding Manufacturer}"/>
                        <DataGridTextColumn Header="Artwork" Binding="{Binding HaveArtwork, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveArtwork}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveArtwork}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Backgrounds" Binding="{Binding HaveBackgrounds, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBackgrounds}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Bezels" Binding="{Binding HaveBezels, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveBezels}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveBezels}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Cards" Binding="{Binding HaveCards, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Controller" Binding="{Binding HaveController, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveController}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveController}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Cards" Binding="{Binding HaveCards, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveCards}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Fade" Binding="{Binding HaveFade, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveFade}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveFade}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Guide" Binding="{Binding HaveGuide, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveGuide}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveGuide}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Manual" Binding="{Binding HaveManual, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveManual}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveManual}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="MultiGame" Binding="{Binding HaveMultiGame, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveMultiGame}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveMultiGame}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Music" Binding="{Binding HaveMusic, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveMusic}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveMusic}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Saves" Binding="{Binding HaveSaves, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveSaves}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveSaves}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Videos" Binding="{Binding HaveVideoXT, UpdateSourceTrigger=PropertyChanged}" SortDirection="Ascending" Visibility="Visible">
                            <DataGridTextColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HaveVideoXT}" 
            								Value="True">
                                            <Setter Property="Background" Value="#263DDE36"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HaveVideoXT}" 
            								Value="False">
                                            <Setter Property="Background" Value="#26FF5454"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>

                    </DataGrid.Columns>
                </DataGrid>
            </Grid>

        </TabControl>
        <ListBox x:Name="listboxSystem" ItemsSource="{Binding Source={StaticResource MainMenuCollectionView}}" VirtualizingStackPanel.IsVirtualizing="False"

                 Margin="5,10"  BorderBrush="Black" Grid.Row="2" Grid.RowSpan="3" SelectionChanged="listboxSystem_SelectionChanged">
            <ListBox.ItemTemplate >
                <DataTemplate>

                    <DockPanel>
                        <Image Source="{Binding SysIcon}" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"  />
                        <TextBlock Text="{Binding name}" Margin="0,4,0,0"  HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="13"/>
                    </DockPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>

        </ListBox>
        <!--<TextBlock x:Name="InfoMessageTextBlock" Foreground="White" Text="{Binding InfoMessage}" Margin="0,0,0,5" Grid.Row="4" Height="16" VerticalAlignment="Bottom" Grid.Column="1" Grid.RowSpan="2" HorizontalAlignment="Right" Width="456"/>-->
        <GridSplitter Grid.Column="1" Grid.Row="3" ResizeDirection="Rows" Cursor="SizeNS" HorizontalAlignment="Stretch" Margin="10,0,0,1"/>
        <StackPanel Orientation="Horizontal" Margin="0,0,28,0" Height="41" VerticalAlignment="Top" Grid.Column="1" Grid.Row="4" HorizontalAlignment="Right" Width="375">

            <!-- Volume slider. This slider allows you to change the speed of the media playback. -->
            <!-- Play button. -->
            <Button Margin="5" Width="16" Background="Green" PreviewMouseUp="OnMouseDownPlayMedia">
                <Button.OpacityMask >
                    <VisualBrush Visual="{StaticResource appbar_control_play}" />
                </Button.OpacityMask>
            </Button>

            <Button Margin="5" Width="22" Background="Gray"  PreviewMouseUp="OnMouseDownPauseMedia" >
                <Button.OpacityMask >
                    <VisualBrush Visual="{StaticResource appbar_control_pause}" />
                </Button.OpacityMask>
            </Button>

            <Button  PreviewMouseUp="OnMouseDownStopMedia" Background="Red"  Margin="5" Width="24" >
                <Button.OpacityMask >
                    <VisualBrush Visual="{StaticResource appbar_control_stop}" />
                </Button.OpacityMask>
            </Button>
            <!-- Volume slider. This slider allows a Volume range between 0 and 1. -->
            <TextBlock Foreground="White" VerticalAlignment="Center" Margin="5"  ><Run Text="Vol"/></TextBlock>
            <Slider x:Name="volumeSlider" VerticalAlignment="Center" ValueChanged="ChangeMediaVolume" 
        		Minimum="0" Maximum="1" Value="0.5" Width="70" Margin="0,12,0,11"/>
            <!-- Seek to slider. Ths slider allows you to jump to different parts of the media playback. -->
            <TextBlock Foreground="White" Margin="5"  VerticalAlignment="Center"><Run Text="Scan"/></TextBlock>
            <Slider x:Name="timelineSlider" Margin="5,0,5,5" ValueChanged="SeekToMediaPosition" Width="70" Height="26" VerticalAlignment="Bottom" />
            <TextBlock x:Name="media_wheelTime" TextWrapping="Wrap" Width="108" Margin="0,12,0,10" Text="{Binding ElementName=media_wheel,Path=Position,UpdateSourceTrigger=PropertyChanged}"></TextBlock>
            <!--<TextBox x:Name="_textVideoTime" Height="23" TextWrapping="Wrap" Text="{Binding ElementName=media_wheel,Path=Position,UpdateSourceTrigger=PropertyChanged}" Width="120"/>-->
        </StackPanel>
        <Controls:ProgressRing x:Name="progressBar"  IsActive="False" Height="292" HorizontalAlignment="Center" VerticalAlignment="Center" Width="486" Margin="255,48,120,50" Grid.Row="2" Grid.Column="1" />
        <TextBlock x:Name="txtPath"  Text="{Binding FullPath, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" FontSize="16" Grid.Column="1" Grid.Row="4" Grid.RowSpan="2" Height="28" VerticalAlignment="Bottom" Margin="4,0,0,-2" HorizontalAlignment="Left" Width="682"/>
        <TextBox Controls:TextBoxHelper.ClearTextButton="True" 
        	Controls:TextBoxHelper.Watermark="Game filtering..."
        	x:Name="filterText" Height="26" Margin="645,19,10,0" TextWrapping="Wrap" VerticalAlignment="Top" Grid.Column="1" TextChanged="filterText_TextChanged_1"/>
        <Grid Margin="4,5,0,10" HorizontalAlignment="Left" Width="106" Grid.RowSpan="3" Grid.Column="1">
            <StackPanel Margin="5,75,-4,0" Orientation="Vertical" HorizontalAlignment="Left" Width="102" Height="121" VerticalAlignment="Top">
                <Controls:ToggleSwitch ToolTip="Show or hide Hyperspin folders." x:Name="toggleHS" Header="HS Visible" HorizontalAlignment="Left" Width="92" Height="56" VerticalAlignment="Bottom" Checked="toggleHS_Checked" Unchecked="toggleHS_Unchecked" IsChecked="True"/>
                <Controls:ToggleSwitch ToolTip="Show or hide Rocketlaunch folders." x:Name="toggleRL" Header="RL Visible" HorizontalAlignment="Left" Width="92" Height="61" VerticalAlignment="Bottom" IsChecked="True" Checked="toggleRL_Checked" Unchecked="toggleRL_Unchecked"/>

            </StackPanel>
            <StackPanel Margin="4,289,0,10" Orientation="Vertical" HorizontalAlignment="Left" Width="97">
                <Controls:ToggleSwitch ToolTip="Enable database editing" x:Name="toggleXML" Header="DB Edit" HorizontalAlignment="Left" Width="97" Height="55" VerticalAlignment="Bottom" Checked="toggleXML_Checked" Unchecked="toggleXML_Unchecked"/>
                <Button Style="{StaticResource AccentedSquareButtonStyle}" x:Name="saveFaves" Content="Favorites" Background="Green" 
        			IsEnabled="False"
        			Margin="0,10,6,0" Height="25" Click="saveFaves_Click"
                        ToolTip="Update favorites.txt from checked favorites games"/>
                <Button Style="{StaticResource AccentedSquareButtonStyle}" x:Name="saveXml" Content="Save DB" Background="Green" ToolTip="Save database XML"
        			Margin="0,2,6,0" Height="25" Click="saveXml_Click" IsEnabled="False"/>
                <Button Style="{StaticResource AccentedSquareButtonStyle}" x:Name="saveGXml" Content="Fav 2 xml" Background="Green" ToolTip="Save favorites.txt to favorites.Xml"
        			Margin="0,2,6,0" Height="25" Click="saveGXml_Click" IsEnabled="False"/>
                <DockPanel Margin="2,5,0,0">
                    <CheckBox x:Name="addFaveToGenre" ToolTip="Add created favorites.xml to genre menu." Content="Add to genre" IsEnabled="False"/>
                </DockPanel>
            </StackPanel>
            <DockPanel Height="30" VerticalAlignment="Top" Margin="4,5,-4,0">
                <Rectangle x:Name="rectHsScan" Fill="Crimson" HorizontalAlignment="Left" Width="30" Height="30" VerticalAlignment="Top" ToolTip="Scan Hyperspin media folders" StrokeThickness="5" Stroke="Black" PreviewMouseUp="btn_ScanHS_Click">
                    <Rectangle.OpacityMask >
                        <VisualBrush Visual="{StaticResource appbar_transit_construction}" />
                    </Rectangle.OpacityMask>
                </Rectangle>
                <Rectangle x:Name="rectRLScan" Fill="Crimson" PreviewMouseUp="btn_ScanHL_Click" HorizontalAlignment="Left" Width="29" Height="30" VerticalAlignment="Top" ToolTip="Scan Rocketlaunch media folders" StrokeThickness="5" Stroke="Black">
                    <Rectangle.OpacityMask >
                        <VisualBrush Visual="{StaticResource appbar_transit_construction}" />
                    </Rectangle.OpacityMask>
                </Rectangle>
                <Rectangle x:Name="rectScanCancel" Fill="Crimson" HorizontalAlignment="Left" Width="31" Height="30" VerticalAlignment="Top" ToolTip="Cancel scanning" PreviewMouseLeftButtonUp="rectScanCancel_PreviewMouseUp">
                    <Rectangle.OpacityMask >
                        <VisualBrush Visual="{StaticResource appbar_cancel}" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </DockPanel>
            <Button x:Name="settingsFlyout" Background="Green" PreviewMouseUp="OnMouseDownPlayMedia" Click="settingsFlyout_Click" Margin="4,40,0,0" HorizontalAlignment="Left" Width="31" Height="30" VerticalAlignment="Top" ToolTip="Hypermint settings">
                <Button.OpacityMask >
                    <VisualBrush Visual="{StaticResource appbar_cog}" />
                </Button.OpacityMask>
            </Button>
            <Button x:Name="_launchGame" HorizontalAlignment="Center" Width="92" Height="41" VerticalAlignment="Top" ToolTip="Launch game menu" Click="_launchGame_Click"
            	Margin="5,201,9,0">
                <Button.OpacityMask >
                    <VisualBrush Visual="{StaticResource appbar_controller_snes}" />
                </Button.OpacityMask>
            </Button>
            <CheckBox x:Name="clonesCheckbox" ToolTip="Filter clones" Content="Clones" Margin="5,257,7,0" IsChecked="True" Height="18" VerticalAlignment="Top" Checked="clonesCheckbox_Checked" Unchecked="clonesCheckbox_Unchecked"/>
        </Grid>
        <ComboBox Margin="5,3,41,0" x:Name="_comboMainMenu" VerticalAlignment="Top" Height="31" SelectionChanged="_comboMainMenu_SelectionChanged" Grid.Row="1" ToolTip="Allows selection for different main menu.xml in Hyperspin/databases/main menu"/>
        <Button x:Name="menuEdit" Background="Green" Margin="0,3,5,0" Height="30" VerticalAlignment="Top" 
                    Click="menuEdit_Click"
                    ToolTip="Main menu manager" Grid.Row="1" HorizontalAlignment="Right" Width="31"
                    >
            <Button.OpacityMask >
                <VisualBrush Visual="{StaticResource appbar_brick}" />
            </Button.OpacityMask>
        </Button>
        <CheckBox x:Name="checkAutoplay" Content="AutoPlay" Grid.Column="1" Margin="0,11,403,0" Grid.Row="4" VerticalAlignment="Top" HorizontalAlignment="Right" Width="100" Unchecked="checkAutoplay_Unchecked" Checked="checkAutoplay_Checked"/>
        <TextBlock x:Name="textMediaInfo" TextWrapping="Wrap" Text="" Height="21" VerticalAlignment="Bottom" Grid.Column="1" Grid.Row="4" FontSize="16" HorizontalAlignment="Right" Width="393" Grid.RowSpan="2" Margin="0,0,0,5"/>

    </Grid>
</Controls:MetroWindow>
